// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortManagerClient is the client API for PortManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortManagerClient interface {
	// Sends a greeting
	AddPort(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortResponse, error)
	GetPort(ctx context.Context, in *PortCode, opts ...grpc.CallOption) (*Port, error)
}

type portManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPortManagerClient(cc grpc.ClientConnInterface) PortManagerClient {
	return &portManagerClient{cc}
}

func (c *portManagerClient) AddPort(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, "/PortManager/AddPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portManagerClient) GetPort(ctx context.Context, in *PortCode, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/PortManager/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortManagerServer is the server API for PortManager service.
// All implementations must embed UnimplementedPortManagerServer
// for forward compatibility
type PortManagerServer interface {
	// Sends a greeting
	AddPort(context.Context, *PortRequest) (*PortResponse, error)
	GetPort(context.Context, *PortCode) (*Port, error)
	mustEmbedUnimplementedPortManagerServer()
}

// UnimplementedPortManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPortManagerServer struct {
}

func (UnimplementedPortManagerServer) AddPort(context.Context, *PortRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPort not implemented")
}
func (UnimplementedPortManagerServer) GetPort(context.Context, *PortCode) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedPortManagerServer) mustEmbedUnimplementedPortManagerServer() {}

// UnsafePortManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortManagerServer will
// result in compilation errors.
type UnsafePortManagerServer interface {
	mustEmbedUnimplementedPortManagerServer()
}

func RegisterPortManagerServer(s grpc.ServiceRegistrar, srv PortManagerServer) {
	s.RegisterService(&PortManager_ServiceDesc, srv)
}

func _PortManager_AddPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortManagerServer).AddPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortManager/AddPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortManagerServer).AddPort(ctx, req.(*PortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortManager_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortManagerServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortManager/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortManagerServer).GetPort(ctx, req.(*PortCode))
	}
	return interceptor(ctx, in, info, handler)
}

// PortManager_ServiceDesc is the grpc.ServiceDesc for PortManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortManager",
	HandlerType: (*PortManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPort",
			Handler:    _PortManager_AddPort_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _PortManager_GetPort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "port_manager.proto",
}
